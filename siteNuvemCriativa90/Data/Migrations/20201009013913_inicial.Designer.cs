// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using siteNuvemCriativa90.Data;

namespace siteNuvemCriativa90.Data.Migrations
{
    [DbContext(typeof(siteNuvemCriativa90DBContext))]
    [Migration("20201009013913_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Arquivo", b =>
                {
                    b.Property<int>("IDArquivo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<int>("IDPortfolio");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Observacao")
                        .HasMaxLength(200);

                    b.HasKey("IDArquivo");

                    b.HasIndex("IDPortfolio");

                    b.ToTable("Arquivos");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Empresa", b =>
                {
                    b.Property<int>("IDEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IDEndereco");

                    b.Property<int>("IDGrupoUsuario");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Necessidade")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ramo")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("IDEmpresa");

                    b.HasIndex("IDEndereco");

                    b.HasIndex("IDGrupoUsuario");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Endereco", b =>
                {
                    b.Property<int>("IDEndereco")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("IDEndereco");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Formulario", b =>
                {
                    b.Property<int>("IDFormulario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Necessidade")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ramo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(17);

                    b.Property<string>("Verificado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("IDFormulario");

                    b.ToTable("Formularios");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.GrupoUsuario", b =>
                {
                    b.Property<int>("IDGrupoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("IDGrupoUsuario");

                    b.ToTable("GrupoUsuarios");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Permissoes", b =>
                {
                    b.Property<int>("IDPermissao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlteraModulo")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("CadastraModulo")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("ConsultaModulo")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("ExcluiModulo")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int>("IDGrupoUsuario");

                    b.Property<string>("RelatorioModulo")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("IDPermissao");

                    b.HasIndex("IDGrupoUsuario");

                    b.ToTable("Permissoes");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Portfolio", b =>
                {
                    b.Property<int>("IDPortfolio")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("DescricaoPortfolio")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IDEmpresa");

                    b.Property<string>("Observacao")
                        .HasMaxLength(100);

                    b.Property<string>("TipoPortfolio")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IDPortfolio");

                    b.HasIndex("IDEmpresa");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Usuario", b =>
                {
                    b.Property<int>("IDUsuario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apagado")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<int>("IDGrupoUsuario");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IDUsuario");

                    b.HasIndex("IDGrupoUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Arquivo", b =>
                {
                    b.HasOne("siteNuvemCriativa90.Models.Portfolio", "Portfolio")
                        .WithMany()
                        .HasForeignKey("IDPortfolio")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Empresa", b =>
                {
                    b.HasOne("siteNuvemCriativa90.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("IDEndereco")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("siteNuvemCriativa90.Models.GrupoUsuario", "GrupoUsuario")
                        .WithMany()
                        .HasForeignKey("IDGrupoUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Permissoes", b =>
                {
                    b.HasOne("siteNuvemCriativa90.Models.GrupoUsuario", "GrupoUsuario")
                        .WithMany()
                        .HasForeignKey("IDGrupoUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Portfolio", b =>
                {
                    b.HasOne("siteNuvemCriativa90.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IDEmpresa")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siteNuvemCriativa90.Models.Usuario", b =>
                {
                    b.HasOne("siteNuvemCriativa90.Models.GrupoUsuario", "GrupoUsuario")
                        .WithMany()
                        .HasForeignKey("IDGrupoUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
